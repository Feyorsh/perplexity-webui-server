#!/usr/bin/env python3

from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI
from dotenv import load_dotenv, find_dotenv
import uvicorn
import os

from langchain_openai_api_bridge.core.create_agent_dto import CreateAgentDto
from langchain_openai_api_bridge.assistant import (
    InMemoryMessageRepository,
    InMemoryRunRepository,
    InMemoryThreadRepository,
)
from langchain_openai_api_bridge.fastapi.langchain_openai_api_bridge_fastapi import (
    LangchainOpenaiApiBridgeFastAPI
)
from langchain_openai_api_bridge.core.function_agent_factory import FunctionAgentFactory
from perplexity_webui_langchain import PerplexityWebUIChatModel

_ = load_dotenv(find_dotenv())


app = FastAPI(
    title="Langchain Agent OpenAI API Bridge to Perplexity WebUI",
    version="1.0",
    description="OpenAI API exposing langchain agent (Perplexity WebUI) as a RESTful API",

)

app.add_api_route(
    path="/",
    endpoint=lambda: {"message": "Welcome to the Langchain Agent OpenAI API Bridge to Perplexity WebUI"},
    methods=["GET"],
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

in_memory_thread_repository = InMemoryThreadRepository()
in_memory_message_repository = InMemoryMessageRepository()
in_memory_run_repository = InMemoryRunRepository()

def create_agent(dto: CreateAgentDto):
    agent = PerplexityWebUIChatModel(email=os.getenv("PERPLEXITY_WEBUI_EMAIL"))
    return agent

bridge = LangchainOpenaiApiBridgeFastAPI(app=app, agent_factory_provider=create_agent)

bridge.bind_openai_chat_completion(prefix="")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0")